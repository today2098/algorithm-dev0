{
	// Place your algorithm-dev ワークスペース snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"BellmanFord": {
		"scope": "cpp",
		"prefix": "BellmanFord",
		"body": [
			"template <typename T>",
			"class BellmanFord {",
			"    struct Edge {",
			"        int from, to;",
			"        T cost;",
			"        explicit Edge(int from_, int to_, T cost_) : from(from_), to(to_), cost(cost_) {}",
			"    };",
			"",
			"    int m_vn;                   // m_vn:=(ノード数).",
			"    std::vector<Edge> m_edges;  // m_edges[]:=(辺リスト).",
			"    std::vector<T> m_d;         // m_d[t]:=(ノードsからtへの最短距離).",
			"    std::vector<int> m_pre;     // m_pre[t]:=(ノードtを訪問する直前のノード番号). 逆方向経路．",
			"",
			"public:",
			"    BellmanFord() : BellmanFord(0) {}",
			"    explicit BellmanFord(size_t vn) : m_vn(vn), m_d(vn, infinity()), m_pre(vn, -1) {}",
			"    explicit BellmanFord(size_t vn, size_t en) : BellmanFord(vn) {",
			"        m_edges.reserve(en);",
			"    }",
			"",
			"    static constexpr T infinity() { return std::numeric_limits<T>::max(); }",
			"    // ノード数を返す．",
			"    int order() const { return m_vn; }",
			"    // 辺数を返す．",
			"    int size() const { return m_edges.size(); }",
			"    // 重み付き有向辺を張る．",
			"    void add_edge(int from, int to, T cost) {",
			"        assert(0 <= from and from < order());",
			"        assert(0 <= to and to < order());",
			"        m_edges.emplace_back(from, to, cost);",
			"    }",
			"    // グラフ全体から負閉路を検出する．O(|V|*|E|).",
			"    bool find_negative_cycle() const {",
			"        std::vector<T> nd(order(), 0);",
			"        for(int i = 0; i < order(); ++i) {",
			"            bool update = false;",
			"            for(const auto &[from, to, cost] : m_edges) {",
			"                if(nd[to] > nd[from] + cost) {",
			"                    nd[to] = nd[from] + cost;",
			"                    update = true;",
			"                }",
			"            }",
			"            if(!update) return false;  // 負閉路なし．",
			"        }",
			"        return true;  // 負閉路あり．",
			"    }",
			"    // ノードsから各ノードへの最短距離を求める．O(|V|*|E|).",
			"    bool bellman_ford(int s) {",
			"        assert(0 <= s and s < order());",
			"        std::fill(m_d.begin(), m_d.end(), infinity());",
			"        m_d[s] = 0;",
			"        std::fill(m_pre.begin(), m_pre.end(), -1);",
			"        for(int i = 0; i < order(); ++i) {",
			"            bool update = false;",
			"            for(const auto &[from, to, cost] : m_edges) {",
			"                if(m_d[from] == infinity()) continue;",
			"                if(m_d[to] > m_d[from] + cost) {",
			"                    m_d[to] = m_d[from] + cost;",
			"                    m_pre[to] = from;",
			"                    update = true;",
			"                }",
			"            }",
			"            if(!update) return false;  // 負閉路なし．",
			"        }",
			"        for(int i = 0; i < order(); ++i) {",
			"            bool update = false;",
			"            for(const auto &[from, to, cost] : m_edges) {",
			"                if(m_d[from] == infinity() or m_d[to] == -infinity()) continue;",
			"                if(m_d[from] == -infinity() or m_d[to] > m_d[from] + cost) {",
			"                    m_d[to] = -infinity();",
			"                    update = true;",
			"                }",
			"            }",
			"            if(!update) break;",
			"        }",
			"        return true;  // 負閉路あり．",
			"    }",
			"    // ノードsからtへの最短距離を返す．",
			"    T distance(int t) const {",
			"        assert(0 <= t and t < order());",
			"        return m_d[t];",
			"    }",
			"    // ノードsからtへの最短経路を復元する．",
			"    std::vector<int> shortest_path(int t) const {",
			"        assert(0 <= t and t < order());",
			"        std::vector<int> path;",
			"        if(distance(t) == infinity() or distance(t) == -infinity()) return path;",
			"        for(; t != -1; t = m_pre[t]) path.push_back(t);",
			"        std::reverse(path.begin(), path.end());",
			"        return path;",
			"    }",
			"};"
		],
		"description": "Bellman-Ford Algorithm（単一始点最短経路）"
	},
	"Dijkstra": {
		"scope": "cpp",
		"prefix": "Dijkstra",
		"body": [
			"template <typename T>",
			"class Dijkstra {",
			"    int m_vn;                                           // m_vn:=(ノード数).",
			"    std::vector<std::vector<std::pair<int, T> > > m_g;  // m_g[v][]:=(ノードvの隣接リスト). pair of (to, cost).",
			"    std::vector<T> m_d;                                 // m_d[t]:=(ノードsからtへの最短距離).",
			"    std::vector<int> m_pre;                             // m_pre[t]:=(ノードtを訪問する直前のノード番号). 逆方向経路．",
			"",
			"public:",
			"    Dijkstra() : Dijkstra(0) {}",
			"    explicit Dijkstra(size_t vn) : m_vn(vn), m_g(vn), m_d(vn, infinity()), m_pre(vn, -1) {}",
			"",
			"    static constexpr T infinity() { return std::numeric_limits<T>::max(); }",
			"    // ノード数を返す．",
			"    int order() const { return m_vn; }",
			"    // 重み付き有向辺を張る．",
			"    void add_edge(int from, int to, T cost) {",
			"        assert(0 <= from and from < order());",
			"        assert(0 <= to and to < order());",
			"        m_g[from].emplace_back(to, cost);",
			"    }",
			"    // ノードsから各ノードへの最短距離を求める．O(|E|*log|V|).",
			"    void dijkstra(int s) {",
			"        assert(0 <= s and s < order());",
			"        std::fill(m_d.begin(), m_d.end(), infinity());",
			"        m_d[s] = 0;",
			"        std::fill(m_pre.begin(), m_pre.end(), -1);",
			"        std::priority_queue<std::pair<T, int>, std::vector<std::pair<T, int> >, std::greater<std::pair<T, int> > > pque;",
			"        pque.emplace(0, s);",
			"        while(!pque.empty()) {",
			"            const auto [dist, v] = pque.top();",
			"            pque.pop();",
			"            if(m_d[v] < dist) continue;",
			"            for(const auto &[to, cost] : m_g[v]) {",
			"                if(m_d[to] > m_d[v] + cost) {",
			"                    m_d[to] = m_d[v] + cost;",
			"                    m_pre[to] = v;",
			"                    pque.emplace(m_d[to], to);",
			"                }",
			"            }",
			"        }",
			"    }",
			"    // ノードsからtへの最短距離を返す．",
			"    T distance(int t) const {",
			"        assert(0 <= t and t < order());",
			"        return m_d[t];",
			"    }",
			"    // ノードsからtへの最短経路を復元する．",
			"    std::vector<int> shortest_path(int t) const {",
			"        assert(0 <= t and t < order());",
			"        std::vector<int> path;",
			"        if(distance(t) == infinity()) return path;",
			"        for(; t != -1; t = m_pre[t]) path.push_back(t);",
			"        std::reverse(path.begin(), path.end());",
			"        return path;",
			"    }",
			"};"
		],
		"description": "Dijkstra's Algorithm（単一始点最短経路）"
	},
	"UnionFind": {
		"scope": "cpp",
		"prefix": "UnionFind",
		"body": [
			"class UnionFind {",
			"    int m_vn;  // m_vn:=(要素数).",
			"    int m_gn;  // m_gn:=(グループ数).",
			"    // m_par[x]:=(要素xの親番号). 0未満の場合，xは根であり，値の絶対値は属するグループのサイズを表す．",
			"    std::vector<int> m_par;",
			"",
			"public:",
			"    UnionFind() : UnionFind(0) {}",
			"    explicit UnionFind(size_t vn) : m_vn(vn), m_gn(vn), m_par(vn, -1) {}",
			"",
			"    // 要素の総数を返す．",
			"    int vn() const { return m_vn; };",
			"    // グループ数を返す．",
			"    int gn() const { return m_gn; };",
			"    // 要素xが属するグループ（根付き木）の根番号を返す．O(α(N)).",
			"    int root(int x) {",
			"        assert(0 <= x and x < vn());",
			"        if(m_par[x] < 0) return x;",
			"        return m_par[x] = root(m_par[x]);  // 経路圧縮．",
			"    }",
			"    // 要素xが属するグループのサイズを返す．",
			"    int size(int x) {",
			"        assert(0 <= x and x < vn());",
			"        return -m_par[root(x)];",
			"    }",
			"    // 要素x, yが同じグループに属するか判定する．",
			"    bool is_same(int x, int y) {",
			"        assert(0 <= x and x < vn());",
			"        assert(0 <= y and y < vn());",
			"        return root(x) == root(y);",
			"    }",
			"    // 要素xが属するグループと要素yが属するグループとを併合する．",
			"    bool unite(int x, int y) {",
			"        assert(0 <= x and x < vn());",
			"        assert(0 <= y and y < vn());",
			"        x = root(x), y = root(y);",
			"        if(x == y) return false;                // Do nothing.",
			"        if(size(x) < size(y)) std::swap(x, y);  // Merge technique (union by size).",
			"        m_par[x] += m_par[y];",
			"        m_par[y] = x;",
			"        m_gn--;",
			"        return true;",
			"    }",
			"    void reset() {",
			"        m_gn = vn();",
			"        std::fill(m_par.begin(), m_par.end(), -1);",
			"    }",
			"};"
		],
		"description": "Union-Find（素集合データ構造）"
	},
}