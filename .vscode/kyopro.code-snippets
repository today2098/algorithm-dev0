{
	// Place your algorithm-dev ワークスペース snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Template": {
		"scope": "cpp",
		"prefix": "main",
		"body": [
			"#include <bits/stdc++.h>",
			"#define REP(i,n)   for(int i=0;i<(int)(n);++i)",
			"#define FOR(i,l,r) for(int i=(int)(l);i<(int)(r);++i)",
			"#define ALL(v)     (v).begin(),(v).end()",
			"using llong = long long;",
			"using vi    = std::vector<int>;",
			"using vvi   = std::vector<vi>;",
			"using pii   = std::pair<int,int>;",
			"using namespace std;",
			"constexpr int       INF  = 1e9;",
			"constexpr long long LINF = 1e18;",
			"constexpr double    EPS  = 1e-10;",
			"constexpr int       MOD  = 998'244'353;",
			"constexpr int       MOD2 = 1e9+7;",
			"",
			"template <typename Type>",
			"inline std::istream &operator>>(std::istream &is, std::vector<Type> &v) {",
			"    for(Type &in : v) is >> in;",
			"    return is;",
			"}",
			"",
			"template <typename Type>",
			"inline std::ostream &operator<<(std::ostream &os, const std::vector<Type> &v) {",
			"    for(auto itr = v.cbegin(); itr != v.cend(); ++itr) os << (itr == v.cbegin() ? \"\" : \" \") << *itr;",
			"    return os;",
			"}",
			"",
			"#ifdef DEBUG",
			"",
			"#include \"debug.hpp\"",
			"using namespace algorithm;",
			"",
			"#else",
			"",
			"#define debug(...) static_cast<void>(0)",
			"",
			"#endif",
			"",
			"int main(){}"
		],
		"isFileTemplate": true,
		"description": "Template"
	},
	"DEBUG": {
		"scope": "cpp",
		"prefix": "DEBUG",
		"body": [
			"#define DEBUG",
			"",
			"#ifdef DEBUG",
			"",
			"#define debug(...) algorithm::debug::debug_internal(__LINE__, #__VA_ARGS__, __VA_ARGS__)",
			"",
			"namespace algorithm {",
			"",
			"namespace debug {",
			"",
			"constexpr std::ostream &os = std::clog;",
			"",
			"struct has_iterator_impl {",
			"    template <class T>",
			"    static constexpr std::true_type check(typename T::iterator *);",
			"",
			"    template <class T>",
			"    static constexpr std::false_type check(...);",
			"};",
			"",
			"template <class T>",
			"class has_iterator : public decltype(has_iterator_impl::check<T>(nullptr)) {};",
			"",
			"// Prototype declaration.",
			"void print(const std::string &s);",
			"void print(std::string_view s);",
			"template <typename T, typename U>",
			"void print(const std::pair<T, U> &p);",
			"template <class T, std::size_t... Idxes>",
			"void print_tuple(const T &t, std::index_sequence<Idxes...>);",
			"template <typename... Ts>",
			"void print(const std::tuple<Ts...> &t);",
			"template <typename... Ts>",
			"void print(const std::stack<Ts...> &st);",
			"template <typename... Ts>",
			"void print(const std::queue<Ts...> &que);",
			"template <typename... Ts>",
			"void print(const std::priority_queue<Ts...> &pque);",
			"template <class T, typename std::enable_if_t<has_iterator<T>::value, bool> = false>",
			"void print(const T &v);",
			"template <typename T, typename std::enable_if_t<!has_iterator<T>::value, bool> = false>",
			"void print(const T &elem);",
			"template <typename T, typename... Args>",
			"void debug_internal(int line, std::string_view context, T &&first, Args &&...args);",
			"",
			"void print(const std::string &s) { os << s; }",
			"",
			"void print(std::string_view s) { os << s; }",
			"",
			"template <typename T, typename U>",
			"void print(const std::pair<T, U> &p) {",
			"    os << \"{\";",
			"    print(p.first);",
			"    os << \", \";",
			"    print(p.second);",
			"    os << \"}\";",
			"}",
			"",
			"template <class T, std::size_t... Idxes>",
			"void print_tuple(const T &t, std::index_sequence<Idxes...>) {",
			"    os << \"{\";",
			"    ((os << (Idxes == 0 ? \"\" : \", \"), print(std::get<Idxes>(t))), ...);",
			"    os << \"}\";",
			"}",
			"",
			"template <typename... Ts>",
			"void print(const std::tuple<Ts...> &t) {",
			"    print_tuple(t, std::make_index_sequence<sizeof...(Ts)>());",
			"}",
			"",
			"template <typename... Ts>",
			"void print(const std::stack<Ts...> &st) {",
			"    std::stack<Ts...> tmp = st;",
			"    os << \"[\";",
			"    while(!tmp.empty()) {",
			"        print(tmp.top());",
			"        tmp.pop();",
			"        if(!tmp.empty()) os << \" \";",
			"    }",
			"    os << \"]\";",
			"}",
			"",
			"template <typename... Ts>",
			"void print(const std::queue<Ts...> &que) {",
			"    std::queue<Ts...> tmp = que;",
			"    os << \"[\";",
			"    while(!tmp.empty()) {",
			"        print(tmp.front());",
			"        tmp.pop();",
			"        if(!tmp.empty()) os << \" \";",
			"    }",
			"    os << \"]\";",
			"}",
			"",
			"template <typename... Ts>",
			"void print(const std::priority_queue<Ts...> &pque) {",
			"    std::priority_queue<Ts...> tmp = pque;",
			"    os << \"[\";",
			"    while(!tmp.empty()) {",
			"        print(tmp.top());",
			"        tmp.pop();",
			"        if(!tmp.empty()) os << \" \";",
			"    }",
			"    os << \"]\";",
			"}",
			"",
			"template <class T, typename std::enable_if_t<has_iterator<T>::value, bool> >",
			"void print(const T &v) {",
			"    os << \"[\";",
			"    for(auto itr = std::cbegin(v); itr != std::cend(v); ++itr) {",
			"        if(itr != std::cbegin(v)) os << \" \";",
			"        print(*itr);",
			"    }",
			"    os << \"]\";",
			"}",
			"",
			"template <typename T, typename std::enable_if_t<!has_iterator<T>::value, bool> >",
			"void print(const T &elem) { os << elem; }",
			"",
			"template <typename T, typename... Args>",
			"void debug_internal(int line, std::string_view context, T &&first, Args &&...args) {",
			"    constexpr const char *open_bracket = (sizeof...(args) == 0 ? \"\" : \"(\");",
			"    constexpr const char *close_bracket = (sizeof...(args) == 0 ? \"\" : \")\");",
			"    os << \"[L\" << line << \"] \" << open_bracket << context << close_bracket << \": \" << open_bracket;",
			"    print(std::forward<T>(first));",
			"    ((os << \", \", print(std::forward<Args>(args))), ...);",
			"    os << close_bracket << std::endl;",
			"}",
			"",
			"}  // namespace debug",
			"",
			"}  // namespace algorithm",
			"",
			"#else",
			"",
			"#define debug(...) static_cast<void>(0)",
			"",
			"#endif"
		],
		"description": "Debug macro"
	},
	"Timer": {
		"scope": "cpp",
		"prefix": "Timer",
		"body": [
			"class Timer {",
			"    std::chrono::system_clock::time_point m_start;",
			"",
			"public:",
			"    Timer() : m_start(std::chrono::system_clock::now()) {}",
			"",
			"    // 計測開始時間を保存する．",
			"    void restart() { m_start = std::chrono::system_clock::now(); }",
			"    // 経過時間を返す．[millisec].",
			"    auto elapsed() const {",
			"        auto now = std::chrono::system_clock::now();",
			"        return std::chrono::duration_cast<std::chrono::milliseconds>(now - m_start).count();",
			"    }",
			"    // 経過時間を返す．[microsec].",
			"    auto elapsed_micro() const {",
			"        auto now = std::chrono::system_clock::now();",
			"        return std::chrono::duration_cast<std::chrono::microseconds>(now - m_start).count();",
			"    }",
			"};"
		],
		"description": "処理時間計測クラス"
	},
	"table": {
		"scope": "cpp",
		"prefix": "table",
		"body": [
			"template <typename Type>",
			"std::vector<Type> table(size_t n, const Type &val) { return std::vector<Type>(n, val); }",
			"",
			"template <typename... Args>",
			"auto table(size_t n, const Args &...args) { return std::vector(n, table(args...)); }"
		],
		"description": "多次元配列生成"
	}
}